#!/bin/bash
set -u -e -C;
shopt -s nullglob;


dir='./tmp';
cpus="$(nproc)"


function err { echo "$@" >&2; exit 1; }
function req { test -x "$1" || err "missing: $1"; }

req dist/build/fgl/fgl
req dist/build/matcher/matcher
req dist/build/mkGraphs/mkGraphs




if test -d "$dir"; then
    echo "Using existing test data";
else

    cat <<EOF
----------------------------------------------------------------------
Generating random graphs...
EOF
    
    # Generate test data if $dir does not exist.

    # Large test: 2k graphs with up to 1000 nodes
    #dist/build/mkGraphs/mkGraphs "$cpus" "$dir" 2000 1000 >&2;

    # Small test: 500 graphs with up to 500 nodes
    #dist/build/mkGraphs/mkGraphs "$cpus" "$dir" 500 500 >&2;

    # Tiny test: 200 graphs with up to 100 nodes
    dist/build/mkGraphs/mkGraphs "$cpus" "$dir" 200 100 >&2;

fi;


# data format: <graphId> <left> <right> <edges>
ls "$dir" | sed -rn 's:g([0-9]+)-([0-9]+)l-([0-9]+)r-([0-9]+)e.graph:\1 \2 \3 \4:p' >| "$dir"/nodes_edges.data


cat <<EOF
----------------------------------------------------------------------
Calculating matchings, do this in parallel...
EOF

limit=30;

binaries='';
for m in fgl matcher danilenko; do
    test -x "dist/build/$m/$m" && binaries+=" $m";
done;

for g in "$dir"/*.graph; do

    b="$(basename "$g" .graph)";

    for m in $binaries; do

        if test -e "$dir/$m.$b.time"; then
            echo "Skipping: $g";
        else
            echo "Running $m on $g";
            timeout -s9 "$limit" /usr/bin/time \
              -o "$dir/$m.$b.time" \
              -f "%U %M" \
              "dist/build/$m/$m" "$g" \
              >| "$dir/$m.$b.out" \
              || echo "${limit} DNF" >| "$dir/$m.$b.time" &
              # || rm -f "$dir/$m.$b.time" &
        fi;
        
        while test "$(jobs | grep -c Running)" -ge "$cpus"; do
            wait -n;
        done;

    done;
done;

wait && echo "Waiting for all jobs";



cat <<EOF
----------------------------------------------------------------------
Comparing all outputs...
EOF

function c {
    test -s "$1" || return 0;
    test -s "$2" || return 0;
    cmp "$1" "$2";
}

for g in "$dir"/*.graph; do
    o="$(basename "$g" .graph).out";

    c "${dir}/matcher.${o}" "${dir}/fgl.${o}"
    c "${dir}/matcher.${o}" "${dir}/danilenko.${o}"
    c "${dir}/fgl.${o}"     "${dir}/danilenko.${o}"
done;



cat <<EOF
----------------------------------------------------------------------
Aggregating timing...
EOF

for m in $binaries; do
    rm -f "${dir}/timings.${m}";
    for f in "${dir}/${m}."*'.time'; do
        dat="$(sed -rn 's:[^.]*\.g([0-9]+)-([0-9]+)l-([0-9]+)r-([0-9]+)e:\1 \2 \3 \4:p' <<< "$(basename "$f" .time)")";

        echo "${dat} $(< $f)" >> "${dir}/timings.${m}";
    done;    
done;



cat <<EOF
----------------------------------------------------------------------
Ok, timings are collected in \`${dir}/timings.*\`.  Calling gnuplot...

EOF

./scripts/plot </dev/null || echo 'gnuplot FAILED';



cat <<EOF

NOTE: If you see warnings about missing files, that should be ok.  The
      corresponding data was just not created.  See INSTALL.

All plots should be in the \`${dir}/\` subdirectory now.

----------------------------------------------------------------------
You can edit \`scripts/plot\` and relaunch just that to plot the
same data in different output formats.

Done.
EOF
