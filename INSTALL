Building
--------

    $ cabal sandbox init &&
      cabal build matcher

    $ dist/build/matcher/matcher


Install library
---------------

    $ cabal sandbox init &&
      cabal install &&
      cabal haddock

    $ firefox dist/doc/html/maxBipartiteMatching/index.html

    $ cabal exec ghci
    Prelude> :m Data.Graph.MaxBipartiteMatching


Testing
-------

    $ cabal sandbox init &&
      cabal install --only-dependencies --enable-tests &&
      cabal test

    $ cabal sandbox init &&
      cabal install --only-dependencies --enable-tests --flag danilenko &&
      cabal configure --enable-tests --flag danilenko &&
      cabal test


This contains two test suites.  Both require QuickCheck, `quickcheck`
only checks some properties not relating to other implementations.
`fglCompare` also needs the Functional Graph Library, and compares the
sizes of matchings generated with both implementations.


Performance shootout
--------------------

Currently the only other running implementation is FGL's maxFlow.

Note: This will take a long time and consume all CPUs you have.

    $ cabal sandbox init &&
      cabal install --only-dependencies --flag buildPerfTest &&
      cabal configure --flag buildPerfTest &&
      cabal build &&
      scripts/shootout

    $ cabal sandbox init &&
      cabal install --only-dependencies --flag danilenko --flag buildPerfTest &&
      cabal configure --flag danilenko --flag buildPerfTest &&
      cabal build &&
      scripts/shootout

The last command will use gnuplot to create the plots as
`./tmp/*.png`.  The plotting script is prepared for creating PDF or
interactive plots as well, see there.
