Building the command line tool
------------------------------

    $ make

Running should print a help message:

    $ dist/build/matcher/matcher


Install the library
-------------------

    $ make library

Documentation:

    $ firefox dist/doc/html/maxBipartiteMatching/index.html


Testing
-------

    $ make test

This contains three test suites, all require QuickCheck.  Test suite
`quickcheck` only checks some properties not relating to other
implementations.  `fgl-qc` also needs the Functional Graph Library,
and compares the sizes of matchings generated with both
implementations.

Only if the file `tests/DanilenkoOriginal.hs` is present: Test suite
`danilenko-qc` tests some properties of a matching calculated with
that [1] algorithm, and compares the size with a mathcing calculated
with this implementation.  The file is not included in this
distribution but was kindly provided by its author.


Performance shootout
--------------------

Note: This may take considerable time and consume all CPUs you have.

    $ make shootout

Creates random graphs (only very few by default) as defined in the
file `scripts/shootout`.  Then this matching algorithm, and `maxFlow`
from the FGL [2] are used to calculate the size of a MCBM, collecting
and plotting performance data.

Only if the file `tests/DanilenkoOriginal.hs` is present: Performance
will also be plotted for a MCBMs calculated with that [1] algorithm.
The file is not included in this distribution but was kindly provided
by its author.

Gnuplot is used to create the plots as `./tmp/*.png`.  The plotting
script is prepared for creating PDF, SVG or interactive plots as well,
see there.

____________________

[1] Nikita Danilenko.  Using Relations to Develop a Haskell Program
    for Computing Maximum Bipartite Matchings.  RAMiCS 2012, LNCS
    7560, pp. 130-145, Springer 2014.
    http://www.rpe.informatik.uni-kiel.de/en/Staff/dipl.-math.-nikita-danilenko
    
[2] Martin Erwig's Functional Graph Library
    https://hackage.haskell.org/package/fgl
