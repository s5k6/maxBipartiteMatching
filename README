
Synopsis
--------

A somewhat efficient, purely functional alternating-path algorithm to
find maximum cardinality matchings in bipartite graphs.


Use
---

Module `Data.Graph.MaxBipartiteMatching` exports

    matching :: (Ord b, Ord a) => S.Set (a, b) -> M.Map b a

which calculates a maximum cardinality matching on the bibartite graph
passed to it.  Bipartite-ness of the input is ensured by the involved
types, the `Ord` constraint comes from the internal use of sets and
maps.  The result type may seem awkward, but guarantees one of the
desired properties, and is also a natural outcome for the problem at
hand.

The small command line tool implemented in `src/Matcher.lhs`
demonstrates the use of the matching library.  See INSTALL for build
instructions.


Implementation
--------------

The implementation is quite compact

    $ grep -Ec '^>' src/Data/Graph/MaxBipartiteMatching.lhs
    25

with the core function accounting for only 21 lines.

The source file contains exensive information about the workings of
the algorithm.  There is no correctness proof, but a test suite is
available, see INSTALL.


Bugs
----

See the `BUGS/open` subdirectory.


History
-------

The implementation was originally announced on Mon, 22 Oct 2012 on the
<haskell-cafe@haskell.org> mailing list, see file `HISTORY` for the
original announcement.

